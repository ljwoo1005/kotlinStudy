
// 람다식
// 코틀린은 자바8과 같이 람다식을 지원한다.
// 람다식은 하나의 함수를 표현하는 방법으로 익명 클래스나 익명 함수를 간결하게 표현할 수 있어서 매우 유용하다.

// 람다식은 코드를 간결하게 해주는 장점이 있지만 디버깅이 어렵고 남발할 경우 오히려 코드 가독성이 떨어져 주의하여 사용해야 한다.

// 먼저 두 수를 인수로 받아서 더해주는 add() 함수이다.
fun add(x : Int, y : Int) : Int {
    return x + y
}

// 반환 자료형을 생략하고 블록과 return을 생략할 수 있다.
fun add2(x : Int, y : Int) = x + y

// 코틀린의 람다식은 다음과 같이 항상 중괄호로 둘러싸여 있다.
// 내용으로는 인수 목록을 나열하고 ("->") 이후에 본문이 위치한다.
// 람다식을 변수에 저장할 수 있고 이러한 변수는 함수처럼 사용할 수 있다. (자바스크립트의 함수표현식과 유사)

// { 인수1 : 타입1, 인수2 : 타입2 -> 본문 }
var add3 = { x : Int, y : Int -> x + y }

println(add3(3, 5)) // 8

// 1. SAM 변환
// 코틀린에서는 추상 메서드 하나를 인수로 사용할 때는 함수로 인수를 전달하면 편하다.
// 자바로 작성된 메서드가 하나인 인터페이스를 구현할 때는 대신 함수를 작성할 수 있다.
// 이를 SAM(Single Abstract Method) 변환이라고 한다.

// SAM 변환의 예를 안드로이드에서 들어보자.
// 안드로이드에서는 버튼 클릭 이벤트를 구현할 때 onClick() 추상 메서드만을 가지는 View.OnClickListener 인터페이스를 구현한다.

// 다음은 안드로이드에서 버튼에 클릭 이벤트 리스너를 구현하는 코드를 일반적인 익명 클래스를 작성하듯 작성한 코드이다.
// 여기서 View.OnClickListener 인터페이스에는 onClick() 추상 메서드가 하나 있기 때문에 onClick() 메서드를 오버라이드하고 있다.
button.setOnClickListener(object : View.OnClickListener) {
    override fun onClick(v : View?) {
        // TODO : 클릭 시 처리
    }
}

// 구현하는 인터페이스에 구현해야 할 메서드가 하나뿐일 때는 이를 람다식으로 변경할 수 있다.
// 다음 코드는 람다식으로 변경되어 코드가 줄었지만 괄호도 중첩되어 있고 기호도 많아 뭔가 코드가 복잡해보인다.
button.setOnClickListener({ v : View? ->
    // TODO : 클릭 시 처리
})

// 메서드 호출 시 맨 뒤에 전달되는 인수가 람다식인 경우에는 람다식을 괄호 밖으로 뺄 수 있다.
// 위 코드는 하나의 인수만 있고 람다식이 전달되었기 때문에 마지막 인수라고 볼 수 있다.
button.setOnClickListener() { v : View? ->
    // TODO : 클릭 시 처리
}

// 그리고 람다가 어떤 메서드의 유일한 인수인 경우에는 메서드의 괄호를 생략할 수 있다.
button.setOnClickListener { v : View? ->
    // TODO : 클릭 시 처리
}

// 컴파일러가 자료형을 추론하는 경우에는 자료형을 생략할 수 있다.
button.setOnClickListener { v ->
    // TODO : 클릭 시 처리
}

// 만약 클릭 시 처리에 어떤 코드를 작성했는데 v 인수를 사용하지 않는다면 v라는 이름은 ("_") 기호로 대치할 수 있다.
// 인수가 많은 경우에 꼭 사용하는 인수 이외에는 ("_") 기호로 변경하여 애초에 잘못 사용하는 것을 방지할 수도 있다.
// 이러한 방식은 다른 함수형 언어에서도 적용되는 함수형 언어의 특징 중 하나이다.
button.setOnClickListener { _ ->
    // TODO : 클릭 시 처리
}

// 그리고 람다식에서 인수가 하나인 경우에는 이를 아예 생략하고 람다 블록 내에서 인수를 it 로 접근할 수 있다.
// 다음 코드에서 it는 View? 타입의 v 인수를 가리킨다.
button.setOnClickListener {
    it.visibility = View.GONE // v.visibility = View.GONE
}

// 위 7가지 형태는 모두 같은 결과를 나타내지만 마지막 코드가 가장 읽기 쉽다.
// 앞으로 예제를 진행하면서 다양한 예를 만나게 될 것이다.

// 중요한 것은 SAM 변환은 자바에서 작성한 인터페이스일 때만 동작한다는 것이다.
// 코틀린에서는 인터페이스 대신에 함수를 사용하는 것이 좋다.