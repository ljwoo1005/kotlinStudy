
// 코틀린의 기본 자료형은 모두 객체이다.
// 자바가 primitive type(원시 타입)과 객체 자료형으로 분류되는 것과는 다르다.
// 그렇기에 아래 설명하는 자료형의 맨 앞글자는 전부 대문자로 구성되어 있다.

// 1. 숫자형
// 코틀린에서 숫자를 표현하는 자료형은 다음과 같다.
/*
 * Double : 8바이트(64비트) 부동소수점
 * Float : 4바이트(32비트) 부동소수점
 * Long : 8바이트(64비트) 정수
 * Int : 4바이트(32비트) 정수
 * Short : 2바이트(16비트) 정수
 * Byte : 1바이트(8비트) 정수
 */
// 리터럴이란 자료형을 알 수 있는 표기 형식을 말한다.
// 리터럴에 따라 코틀린 컴파일러는 자료형을 추론한다.
// 자바에 존재하는 자동 형 변환도 그대로 따라간다. (작은 쪽이 큰 쪽으로 자동 형 변환)
val a = 10          // val a : Int = 10
val b = 10L         // val b : Long = 10L
val c = 10.0        // val c : Double = 10.0
val d = 10.0f       // val d : Float = 10.0f

// 2. 문자형
// 코틀린에서 문자를 나타내는 자료형은 2가지이다.
// · String : 문자열
// · Char : 하나의 문자
// Char가 숫자형이 아니라는 점이 자바와 다르다.

// 문자열의 리터럴은 큰 따옴표(""), 한 문자는 작은 따옴표('')로 자바와 같다.
val str = "안녕하세요"       // val str : String = "안녕하세요"
val char = '안'            // val char : Char = '안'

// 여러 줄의 문자열 표현
// 여러 줄에 걸쳐 문자열을 표현할 때는 큰 따옴표 3개를 리터럴로 사용한다.
val str2 = """오늘은
    날씨가
    좋습니다.
    빨래를
    합시다.
    """
println(str2)

// 문자열 비교
// 문자열 비교는 "=="를 사용한다. 자바의 .equals() 메서드와 대응한다.
println("안녕하세요" == "안녕하세요") // true
// 참고로 자바에서 Object 비교 시에 "=="을 사용하는데에 반해 코틀린에서의 Object 비교는 "==="를 사용한다.

// 문자열 탬플릿
// 코틀린에서 제공되는 문자열 탬플릿 기능은 복잡한 문자열을 표현할 때 아주 편리하다.
// 자바와 같이 "+" 기호로 문자열을 연결할 수 있고, "$" 기호를 사용하면 문자열 리터럴 내부에 변수를 쉽게 포함할 수 있다.
val str3 = "안녕"
println(str3 + "하세요") // 자바

println("$str3 하세요") // 코틀린
println("${str3} 하세요") // 코틀린

// 배열
// 배열은 Array라는 별도의 타입으로 표현된다.
// arrayOf() 메서드를 사용하여 배열의 생성과 초기화를 함께 수행한다.
// 컴파일러가 자료형을 유추할 수 있을 때는 이를 생략할 수 있다.
// 배열의 요소에 접근하는 것은 대괄호([]) 안에 요소 번호를 지정하는 것으로 자바와 같다.
val numbers : Array<Int> = arrayOf(1, 2, 3, 4, 5) // [1, 2, 3, 4, 5]
val numbers2 = arrayOf(1, 2, 3, 4, 5) // 자료형 선언 생략
numbers[0] = 5 // [5, 2, 3, 4, 5]